#source: https://www.datacamp.com/community/tutorials/k-nearest-neighbor-classification-scikit-learn
#Question: Based on the 13 attributes of the wine chemical composition, can we classify an unlabeled wine?

#using KNN with multilple metrics (Classify the wine based on the 13 attributes)

#importing wine dataset from scikit-learn

from sklearn import datasets

#Load dataset
wine = datasets.load_wine()

#exploring the data

# print the names of the header/features
print(wine.feature_names)

# print the label target (class_0, class_1, class_2)
print(wine.target_names)

# print the wine labels (0:Class_0, 1:Class_1, 2:Class_3)
print(wine.target)

# print data(feature)shape
print(wine.data.shape)

#spliting the data (to understand the model performance, dividing the dataset into training and test set)

# Import train_test_split function
from sklearn.model_selection import train_test_split

# Split dataset into training set and test set 65:35
X_train, X_test, y_train, y_test = train_test_split(wine.data, wine.target, test_size=0.35, random_state=1)

#building the model for k=5

#Import knearest neighbors Classifier model
from sklearn.neighbors import KNeighborsClassifier

#Create KNN Classifier
knn = KNeighborsClassifier(n_neighbors=5)

#Train the model using the training sets
knn.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = knn.predict(X_test)

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

#Accuracy: 65.08 %

#building the model for k=7

#Import knearest neighbors Classifier model
from sklearn.neighbors import KNeighborsClassifier

#Create KNN Classifier k=7
knn = KNeighborsClassifier(n_neighbors=7)

#Train the model using the training sets
knn.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = knn.predict(X_test)

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

#Accuracy of 66.66 %

#building the model for k=10

#Import knearest neighbors Classifier model
from sklearn.neighbors import KNeighborsClassifier

#Create KNN Classifier
knn = KNeighborsClassifier(n_neighbors=10)

#Train the model using the training sets
knn.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = knn.predict(X_test)

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

#Accuracy : 68.25 %

#Before addding random_1, the Accuracy changed everytime we run the coding, since it picks random data everytime
#By adding random_1, it makes the accuracy more stable
#we can noticed that an increase by +3 (7 to 10) for the k difference, increase the accuracy by 2% in this example
